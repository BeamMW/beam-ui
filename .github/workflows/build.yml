name: Build

on: [push]

env:
  BUILD_TYPE: Release
  BUILD_CONFIG: RelWithDebInfo

jobs:
###############################################################################
# Build Desktop
###############################################################################
  build_desktop:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        #  os: [macos-10.15, ubuntu-16.04, ubuntu-18.04, ubuntu-20.04, windows-2019]
        os: [macos-10.15, ubuntu-18.04, windows-2019]
        # os: [ubuntu-16.04, windows-2019]
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Submodule update
      shell: bash
      run: |
        git submodule update --init --recursive --remote --jobs 4
        cd beam
        git apply 3rdparty/protobuf-patch.diff

###############################################################################
# Create Build Environment
###############################################################################
    - name: OS name [macos-10.15 && windows]
      shell: bash
      if: matrix.os == 'macos-10.15' || matrix.os == 'windows-2019'
      run: echo "PACKAGE_NAME=${{runner.os}}" >> $GITHUB_ENV

    - name: OS name [ununtu all]
      shell: bash
      if: matrix.os == 'ubuntu-16.04' || matrix.os == 'ubuntu-18.04' || matrix.os == 'ubuntu-20.04'
      run: echo "PACKAGE_NAME=Linux" >> $GITHUB_ENV

    - name: Create Build Environment [macos-10.15]
      if: matrix.os == 'macos-10.15'
      run: |
        echo $GITHUB_WORKSPACE
        echo "OPENSSL_ROOT_DIR=/usr/local/opt/openssl@1.1" >> $GITHUB_ENV
        export TZ=GMT-3
        sudo systemsetup -gettimezone
        security create-keychain -p github macos-build.keychain
        security default-keychain -s macos-build.keychain
        security unlock-keychain -p github macos-build.keychain
        security set-keychain-settings -t 3600 -l ~/Library/Keychains/macos-build.keychain
        echo "${{ secrets.APPLE_DEVELOPER_CERTIFICATE_P12_BASE64 }}" | base64 --decode > certificate.p12
        security import certificate.p12 -k macos-build.keychain -P ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_PASSWORD }} -T /usr/bin/codesign
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k github macos-build.keychain

    - name: Create Build Environment [ununtu all]
      shell: bash
      if: matrix.os == 'ubuntu-16.04' || matrix.os == 'ubuntu-18.04' || matrix.os == 'ubuntu-20.04'
      run: |
        sudo apt update
        sudo apt install build-essential -y
        sudo apt install libssl-dev curl libcups2-dev mesa-common-dev ^libxcb.* libglu1-mesa-dev libglfw3-dev libgles2-mesa-dev libfontconfig1-dev libudev-dev -y
        sudo apt install libfreetype6-dev libx11-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxkbcommon-dev libxkbcommon-x11-dev libpci-dev libicu-dev -y
        sudo apt install libwebp-dev libzstd-dev libbsd-dev uuid-dev liblzma-dev libtiff-dev -y

    - name: Create Build Environment [ubuntu 16.04]
      shell: bash
      if: matrix.os == 'ubuntu-16.04'
      run: |
        sudo add-apt-repository ppa:ubuntu-toolchain-r/test
        sudo apt-get update
        sudo apt-get install g++-7
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-7 60 --slave /usr/bin/g++ g++ /usr/bin/g++-7
        sudo update-alternatives --set gcc "/usr/bin/gcc-7"

    - name: Create Build Environment [windows]
      shell: bash
      if: matrix.os == 'windows-2019'
      run: |
        git clone --depth=1 https://github.com/BeamMW/libs.git c:/beam-libs
        echo "OPENSSL_ROOT_DIR=c:\beam-libs\openssl" >> $GITHUB_ENV
        git clone https://github.com/BeamMW/boost_prebuild_${{matrix.os}}.git c:/boost_prebuild
        echo "BOOST_ROOT=c:\boost_prebuild" >> $GITHUB_ENV

    - name: Download boost [ubuntu && macos]
      if: matrix.os != 'windows-2019'
      shell: bash
      run: |
        git clone --depth=1 https://github.com/BeamMW/boost_prebuild_${{matrix.os}}.git ${{runner.workspace}}/boost_prebuild
        echo "BOOST_INCLUDEDIR=${{runner.workspace}}/boost_prebuild/include" >> $GITHUB_ENV
        echo "BOOST_LIBRARYDIR=${{runner.workspace}}/boost_prebuild/lib/" >> $GITHUB_ENV

###############################################################################
# Install Qt5
###############################################################################
    - name: Cache Qt
      id: cache-qt
      uses: actions/cache@v1
      with:
        path: ../Qt
        key: ${{ matrix.os }}-QtCache
    - name: Install Qt
      uses: jurplel/install-qt-action@v2
      with:
        version: '5.15.2'
        modules: 'qtwebengine'
        cached: ${{ steps.cache-qt.outputs.cache-hit }}

###############################################################################
# Configure CMake
###############################################################################
    - name: Configure CMake [macos-10.15]
      if: matrix.os == 'macos-10.15'
      run: |
        #cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DDEBUG_MESSAGES_IN_RELEASE_MODE=On -DBEAM_LINK_TYPE=Static -DBEAM_USE_STATIC_QT=FALSE -DBRANCH_NAME=${GITHUB_REF##*/} -DBEAM_HW_WALLET=Off .
        cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DDEBUG_MESSAGES_IN_RELEASE_MODE=On -DBEAM_LINK_TYPE=Static -DBEAM_USE_STATIC_QT=FALSE -DBRANCH_NAME=${GITHUB_REF##*/} -DBEAM_SIGN_MACOS_BINARY=On -DBEAM_SIGN_IDENTITY="${{secrets.MACOS_SIGN_IDENTITY}}" -DBEAM_HW_WALLET=Off .

    - name: Configure CMake [ununtu all]
      if: matrix.os == 'ubuntu-16.04' || matrix.os == 'ubuntu-18.04' || matrix.os == 'ubuntu-20.04'
      run: |
        cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DDEBUG_MESSAGES_IN_RELEASE_MODE=On -DBEAM_LINK_TYPE=Static -DBEAM_USE_STATIC_QT=FALSE -DBRANCH_NAME=${GITHUB_REF##*/} -DBEAM_HW_WALLET=Off .

    - name: Configure CMake [windows]
      shell: bash
      if: matrix.os == 'windows-2019'
      run: |
        cmake -G "Visual Studio 16 2019" -A x64  -DOPENSSL_ROOT_DIR=/c/beam-libs/openssl -DCMAKE_CONFIGURATION_TYPES:STRING=$BUILD_CONFIG -DBEAM_LINK_TYPE=Static -DBEAM_USE_STATIC_QT=FALSE -DBRANCH_NAME=${GITHUB_REF##*/} -DBEAM_HW_WALLET=Off .

    - name: Save version info
      shell: bash
      run: |
        echo "BEAM_VERSION=$(cat beam_version.gen)" >> $GITHUB_ENV
        echo "BEAM_TARGET_SUFFIX=-masternet" >> $GITHUB_ENV
        echo "BEAM_DISPLAY_SUFFIX=Masternet" >> $GITHUB_ENV
        echo "BEAM_DISPLAY_SUFFIX2=-Masternet" >> $GITHUB_ENV
        echo "BEAM_DISPLAY_SUFFIX3= Masternet" >> $GITHUB_ENV
        echo "BEAM_DISPLAY_SUFFIX4=_Masternet" >> $GITHUB_ENV
        rm beam_version.gen

###############################################################################
# Build
###############################################################################
    - name: Build [macos-10.15]
      if: matrix.os == 'macos-10.15'
      run: cmake --build . --parallel --config $BUILD_TYPE

    - name: Build [ununtu all]
      shell: bash
      if: matrix.os == 'ubuntu-16.04' || matrix.os == 'ubuntu-18.04' || matrix.os == 'ubuntu-20.04'
      run: make -j$(nproc)

    - name: Build [windows]
      shell: bash
      if: matrix.os == 'windows-2019'
      run: cmake --build . --config $BUILD_CONFIG --parallel

###############################################################################
# Pack
###############################################################################
    - name: CPack [macos-10.15 && ununtu all]
      if: matrix.os != 'windows-2019'
      run: cpack

    - name: LinuxQtDeployTool [ubuntu-16.04]
      if: matrix.os == 'ubuntu-16.04'
      run: echo "LINUX_QT_DEPLOY_TOOL=linuxdeployqt-7" >> $GITHUB_ENV

    - name: LinuxQtDeployTool [ubuntu-18.04]
      if: matrix.os == 'ubuntu-18.04'
      run: echo "LINUX_QT_DEPLOY_TOOL=linuxdeployqt" >> $GITHUB_ENV

    - name: AppImage [ubuntu-16.04 || ubuntu-18.04]
      if: matrix.os == 'ubuntu-16.04' || matrix.os == 'ubuntu-18.04'
      run: |
        echo "Creating AppImage deploy tree"
        mkdir -p ./deploy/usr/bin
        mkdir -p ./deploy/usr/share/applications
        mkdir -p ./deploy/usr/share/icons/hicolor/256x256/apps
        mkdir -p ./deploy/usr/share/icons/hicolor/256x256/mimetypes
        mkdir -p ./deploy/usr/share/mime/packages
        echo "Copying files to AppImage deploy tree"
        cp ui/BeamWallet${{env.BEAM_DISPLAY_SUFFIX}} deploy/usr/bin/
        cp ui/beam.png deploy/usr/share/icons/hicolor/256x256/apps/
        cp ui/beam.png deploy/usr/share/icons/hicolor/256x256/mimetypes/application-x-beam-dapp.png
        cp ui/x-beam-dapp.xml deploy/usr/share/mime/packages
        cp ui/beam.desktop deploy/usr/share/applications/BeamWallet${{env.BEAM_DISPLAY_SUFFIX}}.desktop
        cp ui/beam-wallet.cfg deploy/usr/bin/
        echo "Creating AppImage"
        chmod a+x ui/3rdparty/${{env.LINUX_QT_DEPLOY_TOOL}}
        export VERSION=${{env.BEAM_VERSION}}
        # Below -exclude-libs is a work around for https://github.com/probonopd/linuxdeployqt/issues/35
        ./ui/3rdparty/${{env.LINUX_QT_DEPLOY_TOOL}} ./deploy/usr/share/applications/BeamWallet${{env.BEAM_DISPLAY_SUFFIX}}.desktop -appimage -no-translations -always-overwrite -qmldir="./ui/view" -no-copy-copyright-files -exclude-libs="libnss3.so,libnssutil3.so"

    - name: CPack [windows]
      shell: bash
      if: matrix.os == 'windows-2019'
      run: cpack --verbose -G NSIS -C $BUILD_CONFIG

###############################################################################
# Collect artifacts
###############################################################################
    - name: Collect [macos-10.15]
      shell: bash
      if: matrix.os == 'macos-10.15'
      run: |
        cp BeamWallet${{env.BEAM_DISPLAY_SUFFIX}}-${{env.BEAM_VERSION}}-Darwin.dmg Beam-Wallet${{env.BEAM_DISPLAY_SUFFIX2}}-${{env.BEAM_VERSION}}.dmg
        codesign --deep --force -v -s "${{secrets.MACOS_SIGN_IDENTITY}}" -o runtime --timestamp Beam-Wallet${{env.BEAM_DISPLAY_SUFFIX2}}-${{env.BEAM_VERSION}}.dmg

    - name: Notarize [macos-10.15]
      shell: bash
      if: matrix.os == 'macos-10.15'
      env:
        MACOS_NOTARIZE_USER: ${{ secrets.MACOS_NOTARIZE_USER }}
        MACOS_NOTARIZE_PASS: ${{ secrets.MACOS_NOTARIZE_PASS }}
        MACOS_NOTARIZE_PROVIDER: ${{ secrets.MACOS_NOTARIZE_PROVIDER }}
        BEAM_WALLET_UI_IN: Beam-Wallet${{env.BEAM_DISPLAY_SUFFIX2}}-${{env.BEAM_VERSION}}.dmg
      run: |
        chmod +x ./notarize.sh
        ./notarize.sh
        shasum -a 256 Beam-Wallet${{env.BEAM_DISPLAY_SUFFIX2}}-${{env.BEAM_VERSION}}.dmg > checksum.txt

    - name: Collect [ubuntu]
      shell: bash
      if: matrix.os == 'ubuntu-16.04' || matrix.os == 'ubuntu-18.04' || matrix.os == 'ubuntu-20.04'
      run: |
        #cp BeamWallet${{env.BEAM_DISPLAY_SUFFIX}}-${{env.BEAM_VERSION}}-Linux.deb Beam-Wallet${{env.BEAM_DISPLAY_SUFFIX2}}-${{env.BEAM_VERSION}}.deb
        #sha256sum Beam-Wallet${{env.BEAM_DISPLAY_SUFFIX2}}-${{env.BEAM_VERSION}}.deb > checksum.txt
        cp Beam_Wallet${{env.BEAM_DISPLAY_SUFFIX4}}-${{env.BEAM_VERSION}}-x86_64.AppImage Beam-Wallet${{env.BEAM_DISPLAY_SUFFIX2}}-${{env.BEAM_VERSION}}.AppImage
        sha256sum Beam-Wallet${{env.BEAM_DISPLAY_SUFFIX2}}-${{env.BEAM_VERSION}}.AppImage > Beam-Wallet${{env.BEAM_DISPLAY_SUFFIX2}}-${{env.BEAM_VERSION}}.AppImage-checksum.txt
        chmod a+x Beam-Wallet${{env.BEAM_DISPLAY_SUFFIX2}}-${{env.BEAM_VERSION}}.AppImage
        tar -cvf Beam-Wallet${{env.BEAM_DISPLAY_SUFFIX2}}-${{env.BEAM_VERSION}}.tar Beam-Wallet${{env.BEAM_DISPLAY_SUFFIX2}}-${{env.BEAM_VERSION}}.AppImage

    - name: Collect [windows]
      shell: bash
      if: matrix.os == 'windows-2019'
      run: |
        cp BeamWallet${{env.BEAM_DISPLAY_SUFFIX}}-${{env.BEAM_VERSION}}-win64.exe Beam-Wallet${{env.BEAM_DISPLAY_SUFFIX2}}-${{env.BEAM_VERSION}}.exe
        certUtil -hashfile Beam-Wallet${{env.BEAM_DISPLAY_SUFFIX2}}-${{env.BEAM_VERSION}}.exe SHA256 > checksum.txt

###############################################################################
# Upload
###############################################################################
    - uses: actions/upload-artifact@v2
      if: matrix.os == 'windows-2019' || matrix.os == 'macos-10.15'
      with:
        name: ${{env.PACKAGE_NAME}}-Beam-Wallet${{env.BEAM_DISPLAY_SUFFIX2}}-${{env.BEAM_VERSION}}
        path: |
          Beam-Wallet${{env.BEAM_DISPLAY_SUFFIX2}}-${{env.BEAM_VERSION}}*
          *checksum.txt
        if-no-files-found: error

    - uses: actions/upload-artifact@v2
      if: matrix.os == 'ubuntu-16.04' || matrix.os == 'ubuntu-18.04'
      with:
        name: ${{env.PACKAGE_NAME}}-Beam-Wallet${{env.BEAM_DISPLAY_SUFFIX2}}-${{env.BEAM_VERSION}}
        path: Beam-Wallet-${{env.BEAM_DISPLAY_SUFFIX}}-${{env.BEAM_VERSION}}.tar
        if-no-files-found: error

    - uses: actions/upload-artifact@v2
      if: matrix.os == 'windows-2019'
      with:
        name: beam-pdb${{env.BEAM_TARGET_SUFFIX}}-${{env.BEAM_VERSION}}
        path: ui/${{env.BUILD_CONFIG}}/Beam Wallet${{env.BEAM_DISPLAY_SUFFIX3}}.pdb
        if-no-files-found: error
